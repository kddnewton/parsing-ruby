program ::= compstmt
bodystmt ::= compstmt opt_rescue opt_else ('ensure' compstmt | )
compstmt ::= stmts opt_terms
stmts ::=  | stmt | stmts terms stmt | error stmt
stmt ::= 'alias' fitem fitem | 'alias' tGVAR tGVAR | 'alias' tGVAR tBACK_REF | 'undef' undef_list | stmt 'if' expr | stmt 'unless' expr | stmt 'while' expr | stmt 'until' expr | stmt 'rescue' stmt | 'BEGIN' '{' compstmt '}' | 'END' '{' compstmt '}' | lhs '=' command_call | mlhs '=' command_call | variable tOP_ASGN command_call | primary '[' opt_call_args rbracket tOP_ASGN command_call | primary '.' tIDENTIFIER tOP_ASGN command_call | primary '.' tCONSTANT tOP_ASGN command_call | primary '::' tIDENTIFIER tOP_ASGN command_call | backref tOP_ASGN command_call | lhs '=' mrhs | mlhs '=' arg | mlhs '=' mrhs | expr
expr ::= command_call | expr 'and' expr | expr 'or' expr | 'not' expr | '!' command_call | arg
command_call ::= command | (block_call | block_call '.' operation2 open_args | block_call '::' operation2 open_args) | 'return' call_args | 'break' call_args | 'next' call_args
cmd_brace_block ::= tLBRACE_ARG opt_block_param compstmt '}'
command ::= operation open_args | operation open_args cmd_brace_block | primary '.' operation2 open_args | primary '.' operation2 open_args cmd_brace_block | primary '::' operation2 open_args | primary '::' operation2 open_args cmd_brace_block | 'super' open_args | 'yield' open_args
mlhs ::= mlhs_basic | tLPAREN mlhs_inner rparen
mlhs_inner ::= mlhs_basic | tLPAREN mlhs_inner rparen
mlhs_basic ::= mlhs_head | mlhs_head mlhs_item | mlhs_head tSTAR mlhs_node | mlhs_head tSTAR mlhs_node ',' mlhs_post | mlhs_head tSTAR | mlhs_head tSTAR ',' mlhs_post | tSTAR mlhs_node | tSTAR mlhs_node ',' mlhs_post | tSTAR | tSTAR ',' mlhs_post
mlhs_item ::= mlhs_node | tLPAREN mlhs_inner rparen
mlhs_head ::= mlhs_item ',' | mlhs_head mlhs_item ','
mlhs_post ::= mlhs_item | mlhs_post ',' mlhs_item
mlhs_node ::= variable | primary '[' opt_call_args rbracket | primary '.' tIDENTIFIER | primary '::' tIDENTIFIER | primary '.' tCONSTANT | primary '::' tCONSTANT | tCOLON3 tCONSTANT | backref
lhs ::= variable | primary '[' opt_call_args rbracket | primary '.' tIDENTIFIER | primary '::' tIDENTIFIER | primary '.' tCONSTANT | primary '::' tCONSTANT | tCOLON3 tCONSTANT | backref
cpath ::= tCOLON3 tCONSTANT | tCONSTANT | primary '::' tCONSTANT
fname ::= tIDENTIFIER | tCONSTANT | tFID | op | ('__LINE__' | '__FILE__' | '__ENCODING__' | 'BEGIN' | 'END' | 'alias' | 'and' | 'begin' | 'break' | 'case' | 'class' | 'def' | 'defined?' | 'do' | 'else' | 'elsif' | 'end' | 'ensure' | 'false' | 'for' | 'in' | 'module' | 'next' | 'nil' | 'not' | 'or' | 'redo' | 'rescue' | 'retry' | 'return' | 'self' | 'super' | 'then' | 'true' | 'undef' | 'when' | 'yield' | 'if' | 'unless' | 'while' | 'until')
fitem ::= (fname | symbol) | dsym
undef_list ::= fitem | undef_list ',' fitem
op ::= '|' | '^' | '&' | '<=>' | '==' | '===' | '=~' | '!~' | '>' | '>=' | '<' | '<=' | '!=' | '<<' | '>>' | '+' | '-' | '*' | tSTAR | '/' | '%' | '**' | '!' | '~' | '+@' | '-@' | '[]' | '[]=' | '`'
arg ::= lhs '=' arg | lhs '=' arg 'rescue' arg | variable tOP_ASGN arg | primary '[' opt_call_args rbracket tOP_ASGN arg | primary '.' tIDENTIFIER tOP_ASGN arg | primary '.' tCONSTANT tOP_ASGN arg | primary '::' tIDENTIFIER tOP_ASGN arg | primary '::' tCONSTANT tOP_ASGN arg | tCOLON3 tCONSTANT tOP_ASGN arg | backref tOP_ASGN arg | arg '..' arg | arg '...' arg | arg '+' arg | arg '-' arg | arg '*' arg | arg '/' arg | arg '%' arg | arg '**' arg | tUMINUS_NUM tINTEGER '**' arg | tUMINUS_NUM tFLOAT '**' arg | '+@' arg | '-@' arg | arg '|' arg | arg '^' arg | arg '&' arg | arg '<=>' arg | arg '>' arg | arg '>=' arg | arg '<' arg | arg '<=' arg | arg '==' arg | arg '===' arg | arg '!=' arg | arg '=~' arg | arg '!~' arg | '!' arg | '~' arg | arg '<<' arg | arg '>>' arg | arg tANDOP arg | arg tOROP arg | 'defined?' opt_nl arg | arg '?' arg opt_nl ':' arg | primary
paren_args ::= '(' opt_call_args rparen
opt_paren_args ::=  | paren_args
opt_call_args ::=  | call_args
call_args ::= command | args opt_block_arg | assocs opt_block_arg | args ',' assocs opt_block_arg | block_arg
open_args ::= call_args | tLPAREN_ARG rparen | tLPAREN_ARG (arg ',' args opt_block_arg | arg ',' block_arg | assocs opt_block_arg | arg ',' assocs opt_block_arg | arg ',' args ',' assocs opt_block_arg | block_arg) rparen
block_arg ::= tAMPER arg
opt_block_arg ::= ',' block_arg | 
args ::= arg | tSTAR arg | args ',' arg | args ',' tSTAR arg
mrhs ::= args ',' arg | args ',' tSTAR arg | tSTAR arg
primary ::= ((tINTEGER | tFLOAT | tUMINUS_NUM tINTEGER | tUMINUS_NUM tFLOAT) | symbol | dsym) | string | (tXSTRING_BEG xstring_contents tSTRING_END) | (tREGEXP_BEG xstring_contents tREGEXP_END) | ('%W' ' ' tSTRING_END | '%W' word_list tSTRING_END) | ('%w' ' ' tSTRING_END | '%w' qword_list tSTRING_END) | variable | backref | tFID | 'begin' bodystmt 'end' | tLPAREN_ARG expr rparen | tLPAREN compstmt ')' | primary '::' tCONSTANT | tCOLON3 tCONSTANT | tLBRACK ( | args trailer | args ',' assocs trailer | assocs trailer) ']' | tLBRACE ( | assocs trailer) '}' | 'return' | 'yield' '(' call_args rparen | 'yield' '(' rparen | 'yield' | 'defined?' opt_nl '(' expr rparen | operation brace_block | method_call | method_call brace_block | tLAMBDA (('(' f_args opt_bv_decl rparen | f_args opt_bv_decl) (tLAMBEG compstmt '}' | keyword_do_LAMBDA compstmt 'end')) | 'if' expr then compstmt if_tail 'end' | 'unless' expr then compstmt opt_else 'end' | 'while' expr do compstmt 'end' | 'until' expr do compstmt 'end' | 'case' expr opt_terms case_body 'end' | 'case' opt_terms case_body 'end' | 'for' (lhs | mlhs) 'in' expr do compstmt 'end' | 'class' cpath (term | '<' expr term | error term) bodystmt 'end' | 'class' '<<' expr term bodystmt 'end' | 'module' cpath bodystmt 'end' | 'def' fname f_arglist bodystmt 'end' | 'def' (variable | '(' expr rparen) ('.' | '::') fname f_arglist bodystmt 'end' | 'break' | 'next' | 'redo' | 'retry'
then ::= term | 'then' | term 'then'
do ::= term | keyword_do_cond
if_tail ::= opt_else | 'elsif' expr then compstmt if_tail
opt_else ::=  | 'else' compstmt
f_marg ::= tIDENTIFIER | tLPAREN f_margs rparen
f_marg_list ::= f_marg | f_marg_list ',' f_marg
f_margs ::= f_marg_list | f_marg_list ',' tSTAR tIDENTIFIER | f_marg_list ',' tSTAR tIDENTIFIER ',' f_marg_list | f_marg_list ',' tSTAR | f_marg_list ',' tSTAR ',' f_marg_list | tSTAR tIDENTIFIER | tSTAR tIDENTIFIER ',' f_marg_list | tSTAR | tSTAR ',' f_marg_list
opt_block_param ::=  | ('|' opt_bv_decl '|' | tOROP | '|' (f_arg ',' f_rest_arg opt_f_block_arg | f_arg ',' | f_arg ',' f_rest_arg ',' f_arg opt_f_block_arg | f_arg opt_f_block_arg | f_rest_arg opt_f_block_arg | f_rest_arg ',' f_arg opt_f_block_arg | f_block_arg) opt_bv_decl '|')
opt_bv_decl ::=  | ';' bv_decls
bv_decls ::= tIDENTIFIER | bv_decls ',' tIDENTIFIER
block_call ::= command (keyword_do_block opt_block_param compstmt 'end') | block_call '.' operation2 opt_paren_args | block_call '::' operation2 opt_paren_args
method_call ::= operation paren_args | primary '.' operation2 opt_paren_args | primary '::' operation2 paren_args | primary '::' (tIDENTIFIER | tFID | op) | primary '.' paren_args | primary '::' paren_args | 'super' paren_args | 'super' | primary '[' opt_call_args rbracket
brace_block ::= '{' opt_block_param compstmt '}' | 'do' opt_block_param compstmt 'end'
case_body ::= 'when' args then compstmt (opt_else | case_body)
opt_rescue ::= 'rescue' (arg | mrhs | ) (tASSOC lhs | ) then compstmt opt_rescue | 
string ::= tCHAR | string1 | string string1
string1 ::= tSTRING_BEG string_contents tSTRING_END
word_list ::= | word_list word ' '
word ::= string_content | word string_content
qword_list ::= | qword_list tSTRING_CONTENT ' '
string_contents ::= | string_contents string_content
xstring_contents ::= | xstring_contents string_content
string_content ::= tSTRING_CONTENT | tSTRING_DVAR (tGVAR | tIVAR | tCVAR | backref) | tSTRING_DBEG compstmt '}'
symbol ::= tSYMBEG (fname | tIVAR | tGVAR | tCVAR)
dsym ::= tSYMBEG xstring_contents tSTRING_END
variable ::= tIDENTIFIER | tIVAR | tGVAR | tCONSTANT | tCVAR | 'nil' | 'self' | 'true' | 'false' | '__FILE__' | '__LINE__' | '__ENCODING__'
backref ::= tNTH_REF | tBACK_REF
f_arglist ::= '(' f_args rparen | f_args term
f_args ::= f_arg ',' f_optarg ',' f_rest_arg opt_f_block_arg | f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_f_block_arg | f_arg ',' f_optarg opt_f_block_arg | f_arg ',' f_optarg ',' f_arg opt_f_block_arg | f_arg ',' f_rest_arg opt_f_block_arg | f_arg ',' f_rest_arg ',' f_arg opt_f_block_arg | f_arg opt_f_block_arg | f_optarg ',' f_rest_arg opt_f_block_arg | f_optarg ',' f_rest_arg ',' f_arg opt_f_block_arg | f_optarg opt_f_block_arg | f_optarg ',' f_arg opt_f_block_arg | f_rest_arg opt_f_block_arg | f_rest_arg ',' f_arg opt_f_block_arg | f_block_arg |
f_arg_item ::= tIDENTIFIER | tLPAREN f_margs rparen
f_arg ::= f_arg_item | f_arg ',' f_arg_item
f_opt ::= tIDENTIFIER '=' arg
f_optarg ::= f_opt | f_optarg ',' f_opt
restarg_mark ::= '*' | tSTAR
f_rest_arg ::= restarg_mark tIDENTIFIER | restarg_mark
f_block_arg ::= ('&' | tAMPER) tIDENTIFIER
opt_f_block_arg ::= ',' f_block_arg | 
assocs ::= assoc | assocs ',' assoc
assoc ::= arg tASSOC arg | tLABEL arg
operation ::= tIDENTIFIER | tCONSTANT | tFID
operation2 ::= tIDENTIFIER | tCONSTANT | tFID | op
opt_terms ::= | terms
opt_nl ::= | '\n'
rparen ::= opt_nl ')'
rbracket ::= opt_nl ']'
trailer ::= | '\n' | ','
term ::= ';' | '\n'
terms ::= term | terms ';'
