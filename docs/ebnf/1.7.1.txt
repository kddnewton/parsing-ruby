program ::= compstmt
compstmt ::= stmts opt_terms
stmts ::= none | stmt | stmts terms stmt | error stmt
stmt ::= 'alias' fitem fitem | 'alias' tGVAR tGVAR | 'alias' tGVAR tBACK_REF | 'undef' undef_list | stmt 'if' expr | stmt 'unless' expr | stmt 'while' expr | stmt 'until' expr | stmt 'rescue' stmt | 'BEGIN' '{' compstmt '}' | 'END' '{' compstmt '}' | lhs '=' command_call | mlhs '=' command_call | lhs '=' mrhs_basic | mlhs '=' (arg | mrhs_basic) | expr
expr ::= 'return' call_args | 'break' call_args | 'next' call_args | command_call | expr 'and' expr | expr 'or' expr | 'not' expr | '!' command_call | arg
command_call ::= command | (block_call | block_call '.' operation2 open_args | block_call '::' operation2 open_args)
command ::= operation open_args | primary '.' operation2 open_args | primary '::' operation2 open_args | 'super' open_args | 'yield' call_args
mlhs ::= mlhs_basic | tLPAREN mlhs_entry ')'
mlhs_entry ::= mlhs_basic | tLPAREN mlhs_entry ')'
mlhs_basic ::= mlhs_head | mlhs_head mlhs_item | mlhs_head tSTAR mlhs_node | mlhs_head tSTAR | tSTAR mlhs_node | tSTAR
mlhs_item ::= mlhs_node | tLPAREN mlhs_entry ')'
mlhs_head ::= mlhs_item ',' | mlhs_head mlhs_item ','
mlhs_node ::= variable | primary '[' aref_args ']' | primary '.' tIDENTIFIER | primary '::' tIDENTIFIER | primary '.' tCONSTANT | backref
lhs ::= variable | primary '[' aref_args ']' | primary '.' tIDENTIFIER | primary '::' tIDENTIFIER | primary '.' tCONSTANT | backref
fname ::= tIDENTIFIER | tCONSTANT | tFID | op | ('__LINE__' | '__FILE__' | 'BEGIN' | 'END' | 'alias' | 'and' | 'begin' | 'break' | 'case' | 'class' | 'def' | 'defined?' | 'do' | 'else' | 'elsif' | 'end' | 'ensure' | 'false' | 'for' | 'if' | 'in' | 'module' | 'next' | 'nil' | 'not' | 'or' | 'redo' | 'rescue' | 'retry' | 'return' | 'self' | 'super' | 'then' | 'true' | 'undef' | 'unless' | 'until' | 'when' | 'while' | 'yield')
fitem ::= fname | symbol
undef_list ::= fitem | undef_list ',' fitem
op ::= '|' | '^' | '&' | '<=>' | '==' | '===' | '=~' | '>' | '>=' | '<' | '<=' | '<<' | '>>' | '+' | '-' | '*' | tSTAR | '/' | '%' | '**' | '~' | '+@' | '-@' | '[]' | '[]=' | '`'
arg ::= lhs '=' arg | variable tOP_ASGN arg | primary '[' aref_args ']' tOP_ASGN arg | primary '.' tIDENTIFIER tOP_ASGN arg | primary '.' tCONSTANT tOP_ASGN arg | primary '::' tIDENTIFIER tOP_ASGN arg | backref tOP_ASGN arg | arg '..' arg | arg '...' arg | arg '+' arg | arg '-' arg | arg '*' arg | arg '/' arg | arg '%' arg | arg '**' arg | '+@' arg | '-@' arg | arg '|' arg | arg '^' arg | arg '&' arg | arg '<=>' arg | arg '>' arg | arg '>=' arg | arg '<' arg | arg '<=' arg | arg '==' arg | arg '===' arg | arg '!=' arg | arg '=~' arg | arg '!~' arg | '!' arg | '~' arg | arg '<<' arg | arg '>>' arg | arg tANDOP arg | arg tOROP arg | 'defined?' opt_nl arg | arg '?' arg ':' arg | primary
aref_args ::= none | command opt_nl | args trailer | args ',' tSTAR arg opt_nl | assocs trailer | tSTAR arg opt_nl
paren_args ::= '(' none ')' | '(' call_args opt_nl ')' | '(' block_call opt_nl ')' | '(' args ',' block_call opt_nl ')'
opt_paren_args ::= none | paren_args
call_args ::= command | args opt_block_arg | args ',' tSTAR arg opt_block_arg | assocs opt_block_arg | assocs ',' tSTAR arg opt_block_arg | args ',' assocs opt_block_arg | args ',' assocs ',' tSTAR arg opt_block_arg | tSTAR arg opt_block_arg | block_arg
open_args ::= call_args | tLPAREN_ARG ')' | tLPAREN_ARG (arg ',' args opt_block_arg | arg ',' tSTAR arg opt_block_arg | arg ',' args ',' tSTAR arg opt_block_arg | assocs opt_block_arg | assocs ',' tSTAR arg opt_block_arg | arg ',' assocs opt_block_arg | arg ',' args ',' assocs opt_block_arg | arg ',' assocs ',' tSTAR arg opt_block_arg | arg ',' args ',' assocs ',' tSTAR arg opt_block_arg | tSTAR arg opt_block_arg | block_arg) ')'
block_arg ::= tAMPER arg
opt_block_arg ::= ',' block_arg | none
args ::= arg | args ',' arg
mrhs_basic ::= args ',' arg | args ',' tSTAR arg | tSTAR arg
primary ::= ((tINTEGER | tFLOAT) | symbol | tREGEXP) | string | tXSTRING | tDXSTRING | tDREGEXP | variable | backref | tFID | 'begin' compstmt rescue opt_else ensure 'end' | tLPAREN_ARG expr ')' | tLPAREN compstmt ')' | primary '::' tCONSTANT | '::' tCONSTANT | primary '[' aref_args ']' | tLBRACK aref_args ']' | tLBRACE (none | assocs trailer | args trailer) '}' | 'return' | 'yield' '(' call_args ')' | 'yield' '(' ')' | 'yield' | 'defined?' opt_nl '(' expr ')' | operation brace_block | method_call | method_call brace_block | 'if' expr then compstmt if_tail 'end' | 'unless' expr then compstmt opt_else 'end' | 'while' expr do compstmt 'end' | 'until' expr do compstmt 'end' | 'case' expr opt_terms case_body 'end' | 'case' opt_terms case_body 'end' | 'for' block_var 'in' expr do compstmt 'end' | 'class' tCONSTANT (term | '<' expr term | error term) compstmt 'end' | 'class' '<<' expr term compstmt 'end' | 'module' tCONSTANT compstmt 'end' | 'def' fname f_arglist compstmt rescue opt_else ensure 'end' | 'def' (variable | '(' expr opt_nl ')') ('.' | '::') fname f_arglist compstmt rescue opt_else ensure 'end' | 'break' | 'next' | 'redo' | 'retry'
then ::= term | 'then' | term 'then'
do ::= term | kDO_COND
if_tail ::= opt_else | 'elsif' expr then compstmt if_tail
opt_else ::= none | 'else' compstmt
block_var ::= lhs | mlhs
opt_block_var ::= none | '|' '|' | tOROP | '|' block_var '|'
block_call ::= command (kDO_BLOCK opt_block_var compstmt 'end' | tLBRACE_ARG opt_block_var compstmt '}') | block_call '.' operation2 opt_paren_args | block_call '::' operation2 opt_paren_args
method_call ::= operation paren_args | primary '.' operation2 opt_paren_args | primary '::' operation2 paren_args | primary '::' (tIDENTIFIER | tFID | op) | 'super' paren_args | 'super'
brace_block ::= '{' opt_block_var compstmt '}' | 'do' opt_block_var compstmt 'end'
case_body ::= 'when' (args | args ',' tSTAR arg | tSTAR arg) then compstmt (opt_else | case_body)
rescue ::= 'rescue' (none | args) (tASSOC lhs | none) then compstmt rescue | none
ensure ::= none | 'ensure' compstmt
string ::= tSTRING | tDSTRING | string tSTRING | string tDSTRING
symbol ::= tSYMBEG (fname | tIVAR | tGVAR | tCVAR)
variable ::= tIDENTIFIER | tIVAR | tGVAR | tCONSTANT | tCVAR | 'nil' | 'self' | 'true' | 'false' | '__FILE__' | '__LINE__'
backref ::= tNTH_REF | tBACK_REF
f_arglist ::= '(' f_args opt_nl ')' | f_args term
f_args ::= f_arg ',' f_optarg ',' f_rest_arg opt_f_block_arg | f_arg ',' f_optarg opt_f_block_arg | f_arg ',' f_rest_arg opt_f_block_arg | f_arg opt_f_block_arg | f_optarg ',' f_rest_arg opt_f_block_arg | f_optarg opt_f_block_arg | f_rest_arg opt_f_block_arg | f_block_arg |
f_norm_arg ::= tCONSTANT | tIVAR | tGVAR | tCVAR | tIDENTIFIER
f_arg ::= f_norm_arg | f_arg ',' f_norm_arg
f_opt ::= tIDENTIFIER '=' arg
f_optarg ::= f_opt | f_optarg ',' f_opt
f_rest_arg ::= tSTAR tIDENTIFIER | tSTAR
f_block_arg ::= tAMPER tIDENTIFIER
opt_f_block_arg ::= ',' f_block_arg | none
assocs ::= assoc | assocs ',' assoc
assoc ::= arg tASSOC arg
operation ::= tIDENTIFIER | tCONSTANT | tFID
operation2 ::= tIDENTIFIER | tCONSTANT | tFID | op
opt_terms ::= | terms
opt_nl ::= | '\n'
trailer ::= | '\n' | ','
term ::= ';' | '\n'
terms ::= term | terms ';'
