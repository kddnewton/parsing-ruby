program ::= top_compstmt
top_compstmt ::= top_stmts opt_terms
top_stmts ::=  | top_stmt | top_stmts terms top_stmt | error top_stmt
top_stmt ::= stmt | 'BEGIN' ('{' top_compstmt '}')
bodystmt ::= compstmt opt_rescue 'else' compstmt opt_ensure | compstmt opt_rescue opt_ensure
compstmt ::= stmts opt_terms
stmts ::=  | stmt | stmts terms stmt | error stmt
stmt ::= 'alias' fitem fitem | 'alias' tGVAR tGVAR | 'alias' tGVAR tBACK_REF | 'undef' undef_list | stmt 'if' expr | stmt 'unless' expr | stmt 'while' expr | stmt 'until' expr | stmt 'rescue' stmt | 'END' '{' compstmt '}' | command_asgn | mlhs '=' lex_ctxt command_call | lhs '=' lex_ctxt mrhs | mlhs '=' lex_ctxt mrhs_arg 'rescue' stmt | mlhs '=' lex_ctxt mrhs_arg | expr
command_asgn ::= lhs '=' lex_ctxt command_rhs | var_lhs tOP_ASGN lex_ctxt command_rhs | primary '[' opt_call_args rbracket tOP_ASGN lex_ctxt command_rhs | primary call_op tIDENTIFIER tOP_ASGN lex_ctxt command_rhs | primary call_op tCONSTANT tOP_ASGN lex_ctxt command_rhs | primary '::' tCONSTANT tOP_ASGN lex_ctxt command_rhs | primary '::' tIDENTIFIER tOP_ASGN lex_ctxt command_rhs | backref tOP_ASGN lex_ctxt command_rhs
command_rhs ::= command_call | command_call 'rescue' stmt | command_asgn
expr ::= command_call | expr 'and' expr | expr 'or' expr | 'not' opt_nl expr | '!' command_call | arg '=>' p_as | arg 'in' p_as | arg
defn_head ::= 'def' fname
defs_head ::= 'def' (var_ref | '(' expr rparen) ('.' | '::') fname
expr_value_do ::= expr do
command_call ::= command | (block_call | block_call call_op2 operation2 call_args)
cmd_brace_block ::= tLBRACE_ARG brace_body '}'
command ::= operation call_args | operation call_args cmd_brace_block | primary call_op operation2 call_args | primary call_op operation2 call_args cmd_brace_block | primary '::' operation2 call_args | primary '::' operation2 call_args cmd_brace_block | 'super' call_args | 'yield' call_args | 'return' call_args | 'break' call_args | 'next' call_args
mlhs ::= mlhs_basic | '(' mlhs_inner rparen
mlhs_inner ::= mlhs_basic | '(' mlhs_inner rparen
mlhs_basic ::= mlhs_head | mlhs_head mlhs_item | mlhs_head '*' mlhs_node | mlhs_head '*' mlhs_node ',' mlhs_post | mlhs_head '*' | mlhs_head '*' ',' mlhs_post | '*' mlhs_node | '*' mlhs_node ',' mlhs_post | '*' | '*' ',' mlhs_post
mlhs_item ::= mlhs_node | '(' mlhs_inner rparen
mlhs_head ::= mlhs_item ',' | mlhs_head mlhs_item ','
mlhs_post ::= mlhs_item | mlhs_post ',' mlhs_item
mlhs_node ::= user_variable | keyword_variable | primary '[' opt_call_args rbracket | primary call_op tIDENTIFIER | primary '::' tIDENTIFIER | primary call_op tCONSTANT | primary '::' tCONSTANT | tCOLON3 tCONSTANT | backref
lhs ::= user_variable | keyword_variable | primary '[' opt_call_args rbracket | primary call_op tIDENTIFIER | primary '::' tIDENTIFIER | primary call_op tCONSTANT | primary '::' tCONSTANT | tCOLON3 tCONSTANT | backref
cpath ::= tCOLON3 tCONSTANT | tCONSTANT | primary '::' tCONSTANT
fname ::= tIDENTIFIER | tCONSTANT | tFID | op | ('__LINE__' | '__FILE__' | '__ENCODING__' | 'BEGIN' | 'END' | 'alias' | 'and' | 'begin' | 'break' | 'case' | 'class' | 'def' | 'defined?' | 'do' | 'else' | 'elsif' | 'end' | 'ensure' | 'false' | 'for' | 'in' | 'module' | 'next' | 'nil' | 'not' | 'or' | 'redo' | 'rescue' | 'retry' | 'return' | 'self' | 'super' | 'then' | 'true' | 'undef' | 'when' | 'yield' | 'if' | 'unless' | 'while' | 'until')
fitem ::= fname | symbol
undef_list ::= fitem | undef_list ',' fitem
op ::= '|' | '^' | '&' | '<=>' | '==' | '===' | '=~' | '!~' | '>' | '>=' | '<' | '<=' | '!=' | '<<' | '>>' | '+' | '-' | '*' | '/' | '%' | '**' | tDSTAR | '!' | '~' | '+@' | '-@' | '[]' | '[]=' | '`'
arg ::= lhs '=' lex_ctxt arg_rhs | var_lhs tOP_ASGN lex_ctxt arg_rhs | primary '[' opt_call_args rbracket tOP_ASGN lex_ctxt arg_rhs | primary call_op tIDENTIFIER tOP_ASGN lex_ctxt arg_rhs | primary call_op tCONSTANT tOP_ASGN lex_ctxt arg_rhs | primary '::' tIDENTIFIER tOP_ASGN lex_ctxt arg_rhs | primary '::' tCONSTANT tOP_ASGN lex_ctxt arg_rhs | tCOLON3 tCONSTANT tOP_ASGN lex_ctxt arg_rhs | backref tOP_ASGN lex_ctxt arg_rhs | arg '..' arg | arg '...' arg | arg '..' | arg '...' | '..' arg | '...' arg | arg '+' arg | arg '-' arg | arg '*' arg | arg '/' arg | arg '%' arg | arg '**' arg | tUMINUS_NUM simple_numeric '**' arg | '+@' arg | '-@' arg | arg '|' arg | arg '^' arg | arg '&' arg | arg '<=>' arg | rel_expr | arg '==' arg | arg '===' arg | arg '!=' arg | arg '=~' arg | arg '!~' arg | '!' arg | '~' arg | arg '<<' arg | arg '>>' arg | arg '&&' arg | arg '||' arg | 'defined?' opt_nl arg | arg '?' arg opt_nl ':' arg | defn_head f_opt_paren_args '=' arg | defn_head f_opt_paren_args '=' arg 'rescue' arg | defs_head f_opt_paren_args '=' arg | defs_head f_opt_paren_args '=' arg 'rescue' arg | primary
relop ::= '>' | '<' | '>=' | '<='
rel_expr ::= arg relop arg | rel_expr relop arg
lex_ctxt ::= tSP | 
arg_rhs ::= arg | arg 'rescue' arg
paren_args ::= '(' opt_call_args rparen | '(' args ',' '...' rparen | '(' '...' rparen
opt_paren_args ::=  | paren_args
opt_call_args ::=  | call_args | args ',' | args ',' assocs ',' | assocs ','
call_args ::= command | args opt_block_arg | assocs opt_block_arg | args ',' assocs opt_block_arg | block_arg
block_arg ::= '&' arg
opt_block_arg ::= ',' block_arg | 
args ::= arg | '*' arg | args ',' arg | args ',' '*' arg
mrhs_arg ::= mrhs | arg
mrhs ::= args ',' arg | args ',' '*' arg | '*' arg
primary ::= literal | string | xstring | regexp | words | qwords | symbols | qsymbols | var_ref | backref | tFID | 'begin' bodystmt 'end' | tLPAREN_ARG rparen | tLPAREN_ARG stmt rparen | '(' compstmt ')' | primary '::' tCONSTANT | tCOLON3 tCONSTANT | '[' ( | args trailer | args ',' assocs trailer | assocs trailer) ']' | '{' ( | assocs trailer) '}' | 'return' | 'yield' '(' call_args rparen | 'yield' '(' rparen | 'yield' | 'defined?' opt_nl '(' expr rparen | 'not' '(' expr rparen | 'not' '(' rparen | operation brace_block | method_call | method_call brace_block | lambda | 'if' expr then compstmt if_tail 'end' | 'unless' expr then compstmt opt_else 'end' | 'while' expr_value_do compstmt 'end' | 'until' expr_value_do compstmt 'end' | 'case' expr opt_terms case_body 'end' | 'case' opt_terms case_body 'end' | 'case' expr opt_terms p_case_body 'end' | 'for' (lhs | mlhs) 'in' expr_value_do compstmt 'end' | 'class' cpath ('<' expr term |) bodystmt 'end' | 'class' '<<' expr term bodystmt 'end' | 'module' cpath bodystmt 'end' | defn_head f_arglist bodystmt 'end' | defs_head f_arglist bodystmt 'end' | 'break' | 'next' | 'redo' | 'retry'
then ::= term | 'then' | term 'then'
do ::= term | keyword_do_cond
if_tail ::= opt_else | 'elsif' expr then compstmt if_tail
opt_else ::=  | 'else' compstmt
f_marg ::= tIDENTIFIER | '(' f_margs rparen
f_marg_list ::= f_marg | f_marg_list ',' f_marg
f_margs ::= f_marg_list | f_marg_list ',' f_rest_marg | f_marg_list ',' f_rest_marg ',' f_marg_list | f_rest_marg | f_rest_marg ',' f_marg_list
f_rest_marg ::= '*' tIDENTIFIER | '*'
f_any_kwrest ::= f_kwrest | (kwrest_mark 'nil')
block_args_tail ::= f_block_kwarg ',' f_kwrest opt_f_block_arg | f_block_kwarg opt_f_block_arg | f_any_kwrest opt_f_block_arg | f_block_arg
opt_block_args_tail ::= ',' block_args_tail |
opt_block_param ::=  | ('|' opt_bv_decl '|' | '|' (f_arg ',' f_block_optarg ',' f_rest_arg opt_block_args_tail | f_arg ',' f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail | f_arg ',' f_block_optarg opt_block_args_tail | f_arg ',' f_block_optarg ',' f_arg opt_block_args_tail | f_arg ',' f_rest_arg opt_block_args_tail | f_arg ',' | f_arg ',' f_rest_arg ',' f_arg opt_block_args_tail | f_arg opt_block_args_tail | f_block_optarg ',' f_rest_arg opt_block_args_tail | f_block_optarg ',' f_rest_arg ',' f_arg opt_block_args_tail | f_block_optarg opt_block_args_tail | f_block_optarg ',' f_arg opt_block_args_tail | f_rest_arg opt_block_args_tail | f_rest_arg ',' f_arg opt_block_args_tail | block_args_tail) opt_bv_decl '|')
opt_bv_decl ::= opt_nl | opt_nl ';' bv_decls opt_nl
bv_decls ::= tIDENTIFIER | bv_decls ',' tIDENTIFIER
lambda ::= '->' ('(' f_args opt_bv_decl ')' | f_args) (tLAMBEG compstmt '}' | keyword_do_LAMBDA bodystmt 'end')
do_block ::= keyword_do_block do_body 'end'
block_call ::= command do_block | block_call call_op2 operation2 opt_paren_args | block_call call_op2 operation2 opt_paren_args brace_block | block_call call_op2 operation2 call_args do_block
method_call ::= operation paren_args | primary call_op operation2 opt_paren_args | primary '::' operation2 paren_args | primary '::' (tIDENTIFIER | tFID | op) | primary call_op paren_args | primary '::' paren_args | 'super' paren_args | 'super' | primary '[' opt_call_args rbracket
brace_block ::= '{' brace_body '}' | 'do' do_body 'end'
brace_body ::= opt_block_param compstmt
do_body ::= opt_block_param bodystmt
case_args ::= arg | '*' arg | case_args ',' arg | case_args ',' '*' arg
case_body ::= 'when' case_args then compstmt (opt_else | case_body)
p_case_body ::= 'in' (p_top_expr_body | p_top_expr_body 'if' expr | p_top_expr_body 'unless' expr) then compstmt (opt_else | p_case_body)
p_top_expr_body ::= p_as | p_as ',' | p_as ',' p_args | p_find | p_args_tail | p_kwargs
p_as ::= p_as '=>' tIDENTIFIER | p_alt
p_alt ::= p_alt '|' p_expr_basic | p_expr_basic
p_expr_basic ::= (p_primitive | p_primitive '..' p_primitive | p_primitive '...' p_primitive | p_primitive '..' | p_primitive '...' | tIDENTIFIER | ('^' tIDENTIFIER) | p_const | '..' p_primitive | '...' p_primitive) | p_const '(' p_args rparen | p_const '(' p_find rparen | p_const '(' p_kwargs rparen | p_const '(' rparen | p_const '[' p_args rbracket | p_const '[' p_find rbracket | p_const '[' p_kwargs rbracket | p_const '[' rbracket | '[' p_args rbracket | '[' p_find rbracket | '[' rbracket | '{' p_kwargs rbrace | '{' rbrace | '(' p_as rparen
p_args ::= p_as | p_args_head | p_args_head p_as | p_args_head '*' tIDENTIFIER | p_args_head '*' tIDENTIFIER ',' p_args_post | p_args_head '*' | p_args_head '*' ',' p_args_post | p_args_tail
p_args_head ::= p_as ',' | p_args_head p_as ','
p_args_tail ::= p_rest | p_rest ',' p_args_post
p_find ::= p_rest ',' p_args_post ',' p_rest
p_rest ::= '*' tIDENTIFIER | '*'
p_args_post ::= p_as | p_args_post ',' p_as
p_kwargs ::= p_kwarg ',' p_any_kwrest | p_kwarg | p_kwarg ',' | p_any_kwrest
p_kwarg ::= p_kw | p_kwarg ',' p_kw
p_kw ::= p_kw_label p_as | p_kw_label
p_kw_label ::= tLABEL | tSTRING_BEG string_contents tLABEL_END
p_any_kwrest ::= (kwrest_mark tIDENTIFIER | kwrest_mark) | (kwrest_mark 'nil')
p_primitive ::= literal | string | xstring | regexp | words | qwords | symbols | qsymbols | keyword_variable | lambda
p_const ::= tCOLON3 tCONSTANT | p_const '::' tCONSTANT | tCONSTANT
opt_rescue ::= 'rescue' (arg | mrhs | ) ('=>' lhs | ) then compstmt opt_rescue | 
opt_ensure ::= 'ensure' compstmt | 
literal ::= (simple_numeric | tUMINUS_NUM simple_numeric) | symbol
string ::= tCHAR | string1 | string string1
string1 ::= tSTRING_BEG string_contents tSTRING_END
xstring ::= tXSTRING_BEG xstring_contents tSTRING_END
regexp ::= tREGEXP_BEG regexp_contents tREGEXP_END
words ::= '%W' ' ' word_list tSTRING_END
word_list ::= | word_list word ' '
word ::= string_content | word string_content
symbols ::= '%I' ' ' symbol_list tSTRING_END
symbol_list ::= | symbol_list word ' '
qwords ::= '%w' ' ' qword_list tSTRING_END
qsymbols ::= '%i' ' ' qsym_list tSTRING_END
qword_list ::= | qword_list tSTRING_CONTENT ' '
qsym_list ::= | qsym_list tSTRING_CONTENT ' '
string_contents ::= | string_contents string_content
xstring_contents ::= | xstring_contents string_content
regexp_contents ::= | regexp_contents string_content
string_content ::= tSTRING_CONTENT | tSTRING_DVAR (tGVAR | tIVAR | tCVAR | backref) | tSTRING_DBEG compstmt tSTRING_DEND
symbol ::= (tSYMBEG (fname | tIVAR | tGVAR | tCVAR)) | (tSYMBEG string_contents tSTRING_END)
simple_numeric ::= tINTEGER | tFLOAT | tRATIONAL | tIMAGINARY
user_variable ::= tIDENTIFIER | tIVAR | tGVAR | tCONSTANT | tCVAR
keyword_variable ::= 'nil' | 'self' | 'true' | 'false' | '__FILE__' | '__LINE__' | '__ENCODING__'
var_ref ::= user_variable | keyword_variable
var_lhs ::= user_variable | keyword_variable
backref ::= tNTH_REF | tBACK_REF
f_opt_paren_args ::= f_paren_args | 
f_paren_args ::= '(' f_args rparen | '(' f_arg ',' '...' rparen | '(' '...' rparen
f_arglist ::= f_paren_args | f_args term
args_tail ::= f_kwarg ',' f_kwrest opt_f_block_arg | f_kwarg opt_f_block_arg | f_any_kwrest opt_f_block_arg | f_block_arg
opt_args_tail ::= ',' args_tail |
f_args ::= f_arg ',' f_optarg ',' f_rest_arg opt_args_tail | f_arg ',' f_optarg ',' f_rest_arg ',' f_arg opt_args_tail | f_arg ',' f_optarg opt_args_tail | f_arg ',' f_optarg ',' f_arg opt_args_tail | f_arg ',' f_rest_arg opt_args_tail | f_arg ',' f_rest_arg ',' f_arg opt_args_tail | f_arg opt_args_tail | f_optarg ',' f_rest_arg opt_args_tail | f_optarg ',' f_rest_arg ',' f_arg opt_args_tail | f_optarg opt_args_tail | f_optarg ',' f_arg opt_args_tail | f_rest_arg opt_args_tail | f_rest_arg ',' f_arg opt_args_tail | args_tail |
f_arg_item ::= tIDENTIFIER | '(' f_margs rparen
f_arg ::= f_arg_item | f_arg ',' f_arg_item
f_kw ::= tLABEL arg | tLABEL
f_block_kw ::= tLABEL primary | tLABEL
f_block_kwarg ::= f_block_kw | f_block_kwarg ',' f_block_kw
f_kwarg ::= f_kw | f_kwarg ',' f_kw
kwrest_mark ::= '**' | tDSTAR
f_kwrest ::= kwrest_mark tIDENTIFIER | kwrest_mark
f_opt ::= tIDENTIFIER '=' arg
f_block_opt ::= tIDENTIFIER '=' primary
f_block_optarg ::= f_block_opt | f_block_optarg ',' f_block_opt
f_optarg ::= f_opt | f_optarg ',' f_opt
f_rest_arg ::= '*' tIDENTIFIER | '*'
f_block_arg ::= '&' tIDENTIFIER
opt_f_block_arg ::= ',' f_block_arg | 
assocs ::= assoc | assocs ',' assoc
assoc ::= arg '=>' arg | tLABEL arg | tSTRING_BEG string_contents tLABEL_END arg | tDSTAR arg
operation ::= tIDENTIFIER | tCONSTANT | tFID
operation2 ::= tIDENTIFIER | tCONSTANT | tFID | op
call_op ::= '.' | '&.'
call_op2 ::= call_op | '::'
opt_terms ::= | terms
opt_nl ::= | '\n'
rparen ::= opt_nl ')'
rbracket ::= opt_nl ']'
rbrace ::= opt_nl '}'
trailer ::= | '\n' | ','
term ::= ';' | '\n'
terms ::= term | terms ';'
